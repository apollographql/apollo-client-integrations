diff --git a/dist/cjs/router.cjs b/dist/cjs/router.cjs
index ff603dc0b9e215ba6b1f348e017753df47427130..24fa864e0b546a44b0b70648646f4502eda3293b 100644
--- a/dist/cjs/router.cjs
+++ b/dist/cjs/router.cjs
@@ -60,6 +60,7 @@ class Router {
     this.shouldViewTransition = void 0;
     this.isViewTransitionTypesSupported = void 0;
     this.subscribers = /* @__PURE__ */ new Set();
+    this.streamedValues = {};
     this.startReactTransition = (fn) => fn();
     this.update = (newOptions) => {
       var _a;
@@ -1445,11 +1446,10 @@ ${jsesc(script, { quotes: "backtick" })}\`)` : ""}; if (typeof __TSR__ !== 'unde
     };
     this.streamedKeys = /* @__PURE__ */ new Set();
     this.getStreamedValue = (key) => {
-      var _a;
       if (this.isServer) {
         return void 0;
       }
-      const streamedValue = (_a = window.__TSR__) == null ? void 0 : _a.streamedValues[key];
+      const streamedValue = this.streamedValues[key];
       if (!streamedValue) {
         return;
       }
@@ -1459,14 +1459,14 @@ ${jsesc(script, { quotes: "backtick" })}\`)` : ""}; if (typeof __TSR__ !== 'unde
       return streamedValue.parsed;
     };
     this.streamValue = (key, value) => {
-      var _a;
+      var _a, _b;
       warning(
         !this.streamedKeys.has(key),
         "Key has already been streamed: " + key
       );
-      this.streamedKeys.add(key);
+      this.emit({ type: "onStreamedValue", key });
       this.injectScript(
-        `__TSR__.streamedValues['${key}'] = { value: ${(_a = this.serializer) == null ? void 0 : _a.call(this, this.options.transformer.stringify(value))}}`
+        `__TSR__.streamedValues.push([${(_a = this.serializer) == null ? void 0 : _a.call(this, key)}, ${(_b = this.serializer) == null ? void 0 : _b.call(this, this.options.transformer.stringify(value))}])`
       );
     };
     this._handleNotFound = (matches, err, {
@@ -1518,6 +1518,17 @@ ${jsesc(script, { quotes: "backtick" })}\`)` : ""}; if (typeof __TSR__ !== 'unde
     if (typeof document !== "undefined") {
       window.__TSR__ROUTER__ = this;
     }
+    this.subscribe("onStreamedValue", ({ key }) => this.streamedKeys.add(key));
+    if (typeof document !== "undefined" && window.__TSR__) {
+      const consume = ([key, value]) => {
+        this.streamedValues[key] = { value };
+        this.emit({ type: "onStreamedValue", key });
+        return 0;
+      };
+      window.__TSR__.streamedValues.push = consume;
+      window.__TSR__.streamedValues.forEach(consume);
+      window.__TSR__.streamedValues.length = 0;
+    }
   }
   get state() {
     return this.__store.state;
diff --git a/dist/cjs/router.d.cts b/dist/cjs/router.d.cts
index ecc380af755df6a5326fcc26db0f3e5fe34e3d68..004d9aadaa0511371c71d12ffa30a9580c2b8c2f 100644
--- a/dist/cjs/router.d.cts
+++ b/dist/cjs/router.d.cts
@@ -22,10 +22,7 @@ export interface TSRGlobalMatch {
 }
 export interface TSRGlobal {
     matches: Array<TSRGlobalMatch>;
-    streamedValues: Record<string, {
-        value: any;
-        parsed: any;
-    }>;
+    streamedValues: Array<[key: string, value: any]>;
     cleanScripts: () => void;
     dehydrated?: any;
 }
@@ -480,6 +477,10 @@ export type RouterEvents = {
         pathChanged: boolean;
         hrefChanged: boolean;
     };
+    onStreamedValue: {
+        type: 'onStreamedValue';
+        key: string;
+    };
 };
 export type RouterEvent = RouterEvents[keyof RouterEvents];
 export type RouterListener<TRouterEvent extends RouterEvent> = {
@@ -524,6 +525,7 @@ export declare class Router<in out TRouteTree extends AnyRoute, in out TTrailing
     flatRoutes: Array<AnyRoute>;
     isServer: boolean;
     pathParamsDecodeCharMap?: Map<string, string>;
+    private streamedValues;
     /**
      * @deprecated Use the `createRouter` function instead
      */
diff --git a/dist/esm/router.d.ts b/dist/esm/router.d.ts
index a14c215fe98a53b81f8d7af2bb26bda2bd76c933..c5805c57d0c06c2d8c8ed3a05f9ea2de2489bff5 100644
--- a/dist/esm/router.d.ts
+++ b/dist/esm/router.d.ts
@@ -22,10 +22,7 @@ export interface TSRGlobalMatch {
 }
 export interface TSRGlobal {
     matches: Array<TSRGlobalMatch>;
-    streamedValues: Record<string, {
-        value: any;
-        parsed: any;
-    }>;
+    streamedValues: Array<[key: string, value: any]>;
     cleanScripts: () => void;
     dehydrated?: any;
 }
@@ -480,6 +477,10 @@ export type RouterEvents = {
         pathChanged: boolean;
         hrefChanged: boolean;
     };
+    onStreamedValue: {
+        type: 'onStreamedValue';
+        key: string;
+    };
 };
 export type RouterEvent = RouterEvents[keyof RouterEvents];
 export type RouterListener<TRouterEvent extends RouterEvent> = {
@@ -524,6 +525,7 @@ export declare class Router<in out TRouteTree extends AnyRoute, in out TTrailing
     flatRoutes: Array<AnyRoute>;
     isServer: boolean;
     pathParamsDecodeCharMap?: Map<string, string>;
+    private streamedValues;
     /**
      * @deprecated Use the `createRouter` function instead
      */
diff --git a/dist/esm/router.js b/dist/esm/router.js
index 54809e99911c9b82e94aa66bbda5991ab96b20e8..0af962f3ecba5c1f710d50dfee1792975491fb7d 100644
--- a/dist/esm/router.js
+++ b/dist/esm/router.js
@@ -58,6 +58,7 @@ class Router {
     this.shouldViewTransition = void 0;
     this.isViewTransitionTypesSupported = void 0;
     this.subscribers = /* @__PURE__ */ new Set();
+    this.streamedValues = {};
     this.startReactTransition = (fn) => fn();
     this.update = (newOptions) => {
       var _a;
@@ -1443,11 +1444,10 @@ ${jsesc(script, { quotes: "backtick" })}\`)` : ""}; if (typeof __TSR__ !== 'unde
     };
     this.streamedKeys = /* @__PURE__ */ new Set();
     this.getStreamedValue = (key) => {
-      var _a;
       if (this.isServer) {
         return void 0;
       }
-      const streamedValue = (_a = window.__TSR__) == null ? void 0 : _a.streamedValues[key];
+      const streamedValue = this.streamedValues[key];
       if (!streamedValue) {
         return;
       }
@@ -1457,14 +1457,14 @@ ${jsesc(script, { quotes: "backtick" })}\`)` : ""}; if (typeof __TSR__ !== 'unde
       return streamedValue.parsed;
     };
     this.streamValue = (key, value) => {
-      var _a;
+      var _a, _b;
       warning(
         !this.streamedKeys.has(key),
         "Key has already been streamed: " + key
       );
-      this.streamedKeys.add(key);
+      this.emit({ type: "onStreamedValue", key });
       this.injectScript(
-        `__TSR__.streamedValues['${key}'] = { value: ${(_a = this.serializer) == null ? void 0 : _a.call(this, this.options.transformer.stringify(value))}}`
+        `__TSR__.streamedValues.push([${(_a = this.serializer) == null ? void 0 : _a.call(this, key)}, ${(_b = this.serializer) == null ? void 0 : _b.call(this, this.options.transformer.stringify(value))}])`
       );
     };
     this._handleNotFound = (matches, err, {
@@ -1516,6 +1516,17 @@ ${jsesc(script, { quotes: "backtick" })}\`)` : ""}; if (typeof __TSR__ !== 'unde
     if (typeof document !== "undefined") {
       window.__TSR__ROUTER__ = this;
     }
+    this.subscribe("onStreamedValue", ({ key }) => this.streamedKeys.add(key));
+    if (typeof document !== "undefined" && window.__TSR__) {
+      const consume = ([key, value]) => {
+        this.streamedValues[key] = { value };
+        this.emit({ type: "onStreamedValue", key });
+        return 0;
+      };
+      window.__TSR__.streamedValues.push = consume;
+      window.__TSR__.streamedValues.forEach(consume);
+      window.__TSR__.streamedValues.length = 0;
+    }
   }
   get state() {
     return this.__store.state;
