/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UseSuspenseQueryDeferImport } from './routes/useSuspenseQuery-defer'
import { Route as UseSuspenseQueryImport } from './routes/useSuspenseQuery'
import { Route as UseQueryWithCacheImport } from './routes/useQueryWithCache'
import { Route as UseQueryImport } from './routes/useQuery'
import { Route as UseBackgroundQueryWithoutSsrReadQueryImport } from './routes/useBackgroundQueryWithoutSsrReadQuery'
import { Route as UseBackgroundQueryImport } from './routes/useBackgroundQuery'
import { Route as LoaderDeferImport } from './routes/loader-defer'
import { Route as IndexImport } from './routes/index'
import { Route as PreloadQueryUseSuspenseQueryImport } from './routes/preloadQuery/useSuspenseQuery'
import { Route as PreloadQueryQueryRefUseReadQueryImport } from './routes/preloadQuery/queryRef-useReadQuery'

// Create/Update Routes

const UseSuspenseQueryDeferRoute = UseSuspenseQueryDeferImport.update({
  id: '/useSuspenseQuery-defer',
  path: '/useSuspenseQuery-defer',
  getParentRoute: () => rootRoute,
} as any)

const UseSuspenseQueryRoute = UseSuspenseQueryImport.update({
  id: '/useSuspenseQuery',
  path: '/useSuspenseQuery',
  getParentRoute: () => rootRoute,
} as any)

const UseQueryWithCacheRoute = UseQueryWithCacheImport.update({
  id: '/useQueryWithCache',
  path: '/useQueryWithCache',
  getParentRoute: () => rootRoute,
} as any)

const UseQueryRoute = UseQueryImport.update({
  id: '/useQuery',
  path: '/useQuery',
  getParentRoute: () => rootRoute,
} as any)

const UseBackgroundQueryWithoutSsrReadQueryRoute =
  UseBackgroundQueryWithoutSsrReadQueryImport.update({
    id: '/useBackgroundQueryWithoutSsrReadQuery',
    path: '/useBackgroundQueryWithoutSsrReadQuery',
    getParentRoute: () => rootRoute,
  } as any)

const UseBackgroundQueryRoute = UseBackgroundQueryImport.update({
  id: '/useBackgroundQuery',
  path: '/useBackgroundQuery',
  getParentRoute: () => rootRoute,
} as any)

const LoaderDeferRoute = LoaderDeferImport.update({
  id: '/loader-defer',
  path: '/loader-defer',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PreloadQueryUseSuspenseQueryRoute =
  PreloadQueryUseSuspenseQueryImport.update({
    id: '/preloadQuery/useSuspenseQuery',
    path: '/preloadQuery/useSuspenseQuery',
    getParentRoute: () => rootRoute,
  } as any)

const PreloadQueryQueryRefUseReadQueryRoute =
  PreloadQueryQueryRefUseReadQueryImport.update({
    id: '/preloadQuery/queryRef-useReadQuery',
    path: '/preloadQuery/queryRef-useReadQuery',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/loader-defer': {
      id: '/loader-defer'
      path: '/loader-defer'
      fullPath: '/loader-defer'
      preLoaderRoute: typeof LoaderDeferImport
      parentRoute: typeof rootRoute
    }
    '/useBackgroundQuery': {
      id: '/useBackgroundQuery'
      path: '/useBackgroundQuery'
      fullPath: '/useBackgroundQuery'
      preLoaderRoute: typeof UseBackgroundQueryImport
      parentRoute: typeof rootRoute
    }
    '/useBackgroundQueryWithoutSsrReadQuery': {
      id: '/useBackgroundQueryWithoutSsrReadQuery'
      path: '/useBackgroundQueryWithoutSsrReadQuery'
      fullPath: '/useBackgroundQueryWithoutSsrReadQuery'
      preLoaderRoute: typeof UseBackgroundQueryWithoutSsrReadQueryImport
      parentRoute: typeof rootRoute
    }
    '/useQuery': {
      id: '/useQuery'
      path: '/useQuery'
      fullPath: '/useQuery'
      preLoaderRoute: typeof UseQueryImport
      parentRoute: typeof rootRoute
    }
    '/useQueryWithCache': {
      id: '/useQueryWithCache'
      path: '/useQueryWithCache'
      fullPath: '/useQueryWithCache'
      preLoaderRoute: typeof UseQueryWithCacheImport
      parentRoute: typeof rootRoute
    }
    '/useSuspenseQuery': {
      id: '/useSuspenseQuery'
      path: '/useSuspenseQuery'
      fullPath: '/useSuspenseQuery'
      preLoaderRoute: typeof UseSuspenseQueryImport
      parentRoute: typeof rootRoute
    }
    '/useSuspenseQuery-defer': {
      id: '/useSuspenseQuery-defer'
      path: '/useSuspenseQuery-defer'
      fullPath: '/useSuspenseQuery-defer'
      preLoaderRoute: typeof UseSuspenseQueryDeferImport
      parentRoute: typeof rootRoute
    }
    '/preloadQuery/queryRef-useReadQuery': {
      id: '/preloadQuery/queryRef-useReadQuery'
      path: '/preloadQuery/queryRef-useReadQuery'
      fullPath: '/preloadQuery/queryRef-useReadQuery'
      preLoaderRoute: typeof PreloadQueryQueryRefUseReadQueryImport
      parentRoute: typeof rootRoute
    }
    '/preloadQuery/useSuspenseQuery': {
      id: '/preloadQuery/useSuspenseQuery'
      path: '/preloadQuery/useSuspenseQuery'
      fullPath: '/preloadQuery/useSuspenseQuery'
      preLoaderRoute: typeof PreloadQueryUseSuspenseQueryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/loader-defer': typeof LoaderDeferRoute
  '/useBackgroundQuery': typeof UseBackgroundQueryRoute
  '/useBackgroundQueryWithoutSsrReadQuery': typeof UseBackgroundQueryWithoutSsrReadQueryRoute
  '/useQuery': typeof UseQueryRoute
  '/useQueryWithCache': typeof UseQueryWithCacheRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
  '/useSuspenseQuery-defer': typeof UseSuspenseQueryDeferRoute
  '/preloadQuery/queryRef-useReadQuery': typeof PreloadQueryQueryRefUseReadQueryRoute
  '/preloadQuery/useSuspenseQuery': typeof PreloadQueryUseSuspenseQueryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/loader-defer': typeof LoaderDeferRoute
  '/useBackgroundQuery': typeof UseBackgroundQueryRoute
  '/useBackgroundQueryWithoutSsrReadQuery': typeof UseBackgroundQueryWithoutSsrReadQueryRoute
  '/useQuery': typeof UseQueryRoute
  '/useQueryWithCache': typeof UseQueryWithCacheRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
  '/useSuspenseQuery-defer': typeof UseSuspenseQueryDeferRoute
  '/preloadQuery/queryRef-useReadQuery': typeof PreloadQueryQueryRefUseReadQueryRoute
  '/preloadQuery/useSuspenseQuery': typeof PreloadQueryUseSuspenseQueryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/loader-defer': typeof LoaderDeferRoute
  '/useBackgroundQuery': typeof UseBackgroundQueryRoute
  '/useBackgroundQueryWithoutSsrReadQuery': typeof UseBackgroundQueryWithoutSsrReadQueryRoute
  '/useQuery': typeof UseQueryRoute
  '/useQueryWithCache': typeof UseQueryWithCacheRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
  '/useSuspenseQuery-defer': typeof UseSuspenseQueryDeferRoute
  '/preloadQuery/queryRef-useReadQuery': typeof PreloadQueryQueryRefUseReadQueryRoute
  '/preloadQuery/useSuspenseQuery': typeof PreloadQueryUseSuspenseQueryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/loader-defer'
    | '/useBackgroundQuery'
    | '/useBackgroundQueryWithoutSsrReadQuery'
    | '/useQuery'
    | '/useQueryWithCache'
    | '/useSuspenseQuery'
    | '/useSuspenseQuery-defer'
    | '/preloadQuery/queryRef-useReadQuery'
    | '/preloadQuery/useSuspenseQuery'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/loader-defer'
    | '/useBackgroundQuery'
    | '/useBackgroundQueryWithoutSsrReadQuery'
    | '/useQuery'
    | '/useQueryWithCache'
    | '/useSuspenseQuery'
    | '/useSuspenseQuery-defer'
    | '/preloadQuery/queryRef-useReadQuery'
    | '/preloadQuery/useSuspenseQuery'
  id:
    | '__root__'
    | '/'
    | '/loader-defer'
    | '/useBackgroundQuery'
    | '/useBackgroundQueryWithoutSsrReadQuery'
    | '/useQuery'
    | '/useQueryWithCache'
    | '/useSuspenseQuery'
    | '/useSuspenseQuery-defer'
    | '/preloadQuery/queryRef-useReadQuery'
    | '/preloadQuery/useSuspenseQuery'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoaderDeferRoute: typeof LoaderDeferRoute
  UseBackgroundQueryRoute: typeof UseBackgroundQueryRoute
  UseBackgroundQueryWithoutSsrReadQueryRoute: typeof UseBackgroundQueryWithoutSsrReadQueryRoute
  UseQueryRoute: typeof UseQueryRoute
  UseQueryWithCacheRoute: typeof UseQueryWithCacheRoute
  UseSuspenseQueryRoute: typeof UseSuspenseQueryRoute
  UseSuspenseQueryDeferRoute: typeof UseSuspenseQueryDeferRoute
  PreloadQueryQueryRefUseReadQueryRoute: typeof PreloadQueryQueryRefUseReadQueryRoute
  PreloadQueryUseSuspenseQueryRoute: typeof PreloadQueryUseSuspenseQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoaderDeferRoute: LoaderDeferRoute,
  UseBackgroundQueryRoute: UseBackgroundQueryRoute,
  UseBackgroundQueryWithoutSsrReadQueryRoute:
    UseBackgroundQueryWithoutSsrReadQueryRoute,
  UseQueryRoute: UseQueryRoute,
  UseQueryWithCacheRoute: UseQueryWithCacheRoute,
  UseSuspenseQueryRoute: UseSuspenseQueryRoute,
  UseSuspenseQueryDeferRoute: UseSuspenseQueryDeferRoute,
  PreloadQueryQueryRefUseReadQueryRoute: PreloadQueryQueryRefUseReadQueryRoute,
  PreloadQueryUseSuspenseQueryRoute: PreloadQueryUseSuspenseQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/loader-defer",
        "/useBackgroundQuery",
        "/useBackgroundQueryWithoutSsrReadQuery",
        "/useQuery",
        "/useQueryWithCache",
        "/useSuspenseQuery",
        "/useSuspenseQuery-defer",
        "/preloadQuery/queryRef-useReadQuery",
        "/preloadQuery/useSuspenseQuery"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/loader-defer": {
      "filePath": "loader-defer.tsx"
    },
    "/useBackgroundQuery": {
      "filePath": "useBackgroundQuery.tsx"
    },
    "/useBackgroundQueryWithoutSsrReadQuery": {
      "filePath": "useBackgroundQueryWithoutSsrReadQuery.tsx"
    },
    "/useQuery": {
      "filePath": "useQuery.tsx"
    },
    "/useQueryWithCache": {
      "filePath": "useQueryWithCache.tsx"
    },
    "/useSuspenseQuery": {
      "filePath": "useSuspenseQuery.tsx"
    },
    "/useSuspenseQuery-defer": {
      "filePath": "useSuspenseQuery-defer.tsx"
    },
    "/preloadQuery/queryRef-useReadQuery": {
      "filePath": "preloadQuery/queryRef-useReadQuery.tsx"
    },
    "/preloadQuery/useSuspenseQuery": {
      "filePath": "preloadQuery/useSuspenseQuery.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
