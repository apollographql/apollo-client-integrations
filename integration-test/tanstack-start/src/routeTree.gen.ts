/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UseSuspenseQueryDeferRouteImport } from './routes/useSuspenseQuery-defer'
import { Route as UseSuspenseQueryRouteImport } from './routes/useSuspenseQuery'
import { Route as UseQueryWithCacheRouteImport } from './routes/useQueryWithCache'
import { Route as UseQueryRouteImport } from './routes/useQuery'
import { Route as UseBackgroundQueryWithoutSsrReadQueryRouteImport } from './routes/useBackgroundQueryWithoutSsrReadQuery'
import { Route as UseBackgroundQueryRouteImport } from './routes/useBackgroundQuery'
import { Route as LoaderDeferRouteImport } from './routes/loader-defer'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PreloadQueryUseSuspenseQueryRouteImport } from './routes/preloadQuery/useSuspenseQuery'
import { Route as PreloadQueryQueryRefUseReadQueryRouteImport } from './routes/preloadQuery/queryRef-useReadQuery'
import { Route as ApiGraphqlRouteImport } from './routes/api.graphql'

const UseSuspenseQueryDeferRoute = UseSuspenseQueryDeferRouteImport.update({
  id: '/useSuspenseQuery-defer',
  path: '/useSuspenseQuery-defer',
  getParentRoute: () => rootRouteImport,
} as any)
const UseSuspenseQueryRoute = UseSuspenseQueryRouteImport.update({
  id: '/useSuspenseQuery',
  path: '/useSuspenseQuery',
  getParentRoute: () => rootRouteImport,
} as any)
const UseQueryWithCacheRoute = UseQueryWithCacheRouteImport.update({
  id: '/useQueryWithCache',
  path: '/useQueryWithCache',
  getParentRoute: () => rootRouteImport,
} as any)
const UseQueryRoute = UseQueryRouteImport.update({
  id: '/useQuery',
  path: '/useQuery',
  getParentRoute: () => rootRouteImport,
} as any)
const UseBackgroundQueryWithoutSsrReadQueryRoute =
  UseBackgroundQueryWithoutSsrReadQueryRouteImport.update({
    id: '/useBackgroundQueryWithoutSsrReadQuery',
    path: '/useBackgroundQueryWithoutSsrReadQuery',
    getParentRoute: () => rootRouteImport,
  } as any)
const UseBackgroundQueryRoute = UseBackgroundQueryRouteImport.update({
  id: '/useBackgroundQuery',
  path: '/useBackgroundQuery',
  getParentRoute: () => rootRouteImport,
} as any)
const LoaderDeferRoute = LoaderDeferRouteImport.update({
  id: '/loader-defer',
  path: '/loader-defer',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PreloadQueryUseSuspenseQueryRoute =
  PreloadQueryUseSuspenseQueryRouteImport.update({
    id: '/preloadQuery/useSuspenseQuery',
    path: '/preloadQuery/useSuspenseQuery',
    getParentRoute: () => rootRouteImport,
  } as any)
const PreloadQueryQueryRefUseReadQueryRoute =
  PreloadQueryQueryRefUseReadQueryRouteImport.update({
    id: '/preloadQuery/queryRef-useReadQuery',
    path: '/preloadQuery/queryRef-useReadQuery',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiGraphqlRoute = ApiGraphqlRouteImport.update({
  id: '/api/graphql',
  path: '/api/graphql',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/loader-defer': typeof LoaderDeferRoute
  '/useBackgroundQuery': typeof UseBackgroundQueryRoute
  '/useBackgroundQueryWithoutSsrReadQuery': typeof UseBackgroundQueryWithoutSsrReadQueryRoute
  '/useQuery': typeof UseQueryRoute
  '/useQueryWithCache': typeof UseQueryWithCacheRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
  '/useSuspenseQuery-defer': typeof UseSuspenseQueryDeferRoute
  '/api/graphql': typeof ApiGraphqlRoute
  '/preloadQuery/queryRef-useReadQuery': typeof PreloadQueryQueryRefUseReadQueryRoute
  '/preloadQuery/useSuspenseQuery': typeof PreloadQueryUseSuspenseQueryRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/loader-defer': typeof LoaderDeferRoute
  '/useBackgroundQuery': typeof UseBackgroundQueryRoute
  '/useBackgroundQueryWithoutSsrReadQuery': typeof UseBackgroundQueryWithoutSsrReadQueryRoute
  '/useQuery': typeof UseQueryRoute
  '/useQueryWithCache': typeof UseQueryWithCacheRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
  '/useSuspenseQuery-defer': typeof UseSuspenseQueryDeferRoute
  '/api/graphql': typeof ApiGraphqlRoute
  '/preloadQuery/queryRef-useReadQuery': typeof PreloadQueryQueryRefUseReadQueryRoute
  '/preloadQuery/useSuspenseQuery': typeof PreloadQueryUseSuspenseQueryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/loader-defer': typeof LoaderDeferRoute
  '/useBackgroundQuery': typeof UseBackgroundQueryRoute
  '/useBackgroundQueryWithoutSsrReadQuery': typeof UseBackgroundQueryWithoutSsrReadQueryRoute
  '/useQuery': typeof UseQueryRoute
  '/useQueryWithCache': typeof UseQueryWithCacheRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
  '/useSuspenseQuery-defer': typeof UseSuspenseQueryDeferRoute
  '/api/graphql': typeof ApiGraphqlRoute
  '/preloadQuery/queryRef-useReadQuery': typeof PreloadQueryQueryRefUseReadQueryRoute
  '/preloadQuery/useSuspenseQuery': typeof PreloadQueryUseSuspenseQueryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/loader-defer'
    | '/useBackgroundQuery'
    | '/useBackgroundQueryWithoutSsrReadQuery'
    | '/useQuery'
    | '/useQueryWithCache'
    | '/useSuspenseQuery'
    | '/useSuspenseQuery-defer'
    | '/api/graphql'
    | '/preloadQuery/queryRef-useReadQuery'
    | '/preloadQuery/useSuspenseQuery'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/loader-defer'
    | '/useBackgroundQuery'
    | '/useBackgroundQueryWithoutSsrReadQuery'
    | '/useQuery'
    | '/useQueryWithCache'
    | '/useSuspenseQuery'
    | '/useSuspenseQuery-defer'
    | '/api/graphql'
    | '/preloadQuery/queryRef-useReadQuery'
    | '/preloadQuery/useSuspenseQuery'
  id:
    | '__root__'
    | '/'
    | '/loader-defer'
    | '/useBackgroundQuery'
    | '/useBackgroundQueryWithoutSsrReadQuery'
    | '/useQuery'
    | '/useQueryWithCache'
    | '/useSuspenseQuery'
    | '/useSuspenseQuery-defer'
    | '/api/graphql'
    | '/preloadQuery/queryRef-useReadQuery'
    | '/preloadQuery/useSuspenseQuery'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoaderDeferRoute: typeof LoaderDeferRoute
  UseBackgroundQueryRoute: typeof UseBackgroundQueryRoute
  UseBackgroundQueryWithoutSsrReadQueryRoute: typeof UseBackgroundQueryWithoutSsrReadQueryRoute
  UseQueryRoute: typeof UseQueryRoute
  UseQueryWithCacheRoute: typeof UseQueryWithCacheRoute
  UseSuspenseQueryRoute: typeof UseSuspenseQueryRoute
  UseSuspenseQueryDeferRoute: typeof UseSuspenseQueryDeferRoute
  ApiGraphqlRoute: typeof ApiGraphqlRoute
  PreloadQueryQueryRefUseReadQueryRoute: typeof PreloadQueryQueryRefUseReadQueryRoute
  PreloadQueryUseSuspenseQueryRoute: typeof PreloadQueryUseSuspenseQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/useSuspenseQuery-defer': {
      id: '/useSuspenseQuery-defer'
      path: '/useSuspenseQuery-defer'
      fullPath: '/useSuspenseQuery-defer'
      preLoaderRoute: typeof UseSuspenseQueryDeferRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useSuspenseQuery': {
      id: '/useSuspenseQuery'
      path: '/useSuspenseQuery'
      fullPath: '/useSuspenseQuery'
      preLoaderRoute: typeof UseSuspenseQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useQueryWithCache': {
      id: '/useQueryWithCache'
      path: '/useQueryWithCache'
      fullPath: '/useQueryWithCache'
      preLoaderRoute: typeof UseQueryWithCacheRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useQuery': {
      id: '/useQuery'
      path: '/useQuery'
      fullPath: '/useQuery'
      preLoaderRoute: typeof UseQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useBackgroundQueryWithoutSsrReadQuery': {
      id: '/useBackgroundQueryWithoutSsrReadQuery'
      path: '/useBackgroundQueryWithoutSsrReadQuery'
      fullPath: '/useBackgroundQueryWithoutSsrReadQuery'
      preLoaderRoute: typeof UseBackgroundQueryWithoutSsrReadQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/useBackgroundQuery': {
      id: '/useBackgroundQuery'
      path: '/useBackgroundQuery'
      fullPath: '/useBackgroundQuery'
      preLoaderRoute: typeof UseBackgroundQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/loader-defer': {
      id: '/loader-defer'
      path: '/loader-defer'
      fullPath: '/loader-defer'
      preLoaderRoute: typeof LoaderDeferRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/preloadQuery/useSuspenseQuery': {
      id: '/preloadQuery/useSuspenseQuery'
      path: '/preloadQuery/useSuspenseQuery'
      fullPath: '/preloadQuery/useSuspenseQuery'
      preLoaderRoute: typeof PreloadQueryUseSuspenseQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/preloadQuery/queryRef-useReadQuery': {
      id: '/preloadQuery/queryRef-useReadQuery'
      path: '/preloadQuery/queryRef-useReadQuery'
      fullPath: '/preloadQuery/queryRef-useReadQuery'
      preLoaderRoute: typeof PreloadQueryQueryRefUseReadQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/graphql': {
      id: '/api/graphql'
      path: '/api/graphql'
      fullPath: '/api/graphql'
      preLoaderRoute: typeof ApiGraphqlRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoaderDeferRoute: LoaderDeferRoute,
  UseBackgroundQueryRoute: UseBackgroundQueryRoute,
  UseBackgroundQueryWithoutSsrReadQueryRoute:
    UseBackgroundQueryWithoutSsrReadQueryRoute,
  UseQueryRoute: UseQueryRoute,
  UseQueryWithCacheRoute: UseQueryWithCacheRoute,
  UseSuspenseQueryRoute: UseSuspenseQueryRoute,
  UseSuspenseQueryDeferRoute: UseSuspenseQueryDeferRoute,
  ApiGraphqlRoute: ApiGraphqlRoute,
  PreloadQueryQueryRefUseReadQueryRoute: PreloadQueryQueryRefUseReadQueryRoute,
  PreloadQueryUseSuspenseQueryRoute: PreloadQueryUseSuspenseQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
